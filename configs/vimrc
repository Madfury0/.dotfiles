" Set leader key
let mapleader = " "

" Enable line numbers
set number
set relativenumber

" Disabling line wrap
set wrap!

" Set indentation options
set expandtab
set shiftwidth=4
set tabstop=4

"syntax highlighting
syntax on

" Enable mouse support and hover delay
set mouse=a
set updatetime=1000

" Show matching brackets
set showmatch
set matchtime=2

" Highlight yanked text briefly
augroup YankHighlight
    autocmd!
    autocmd TextYankPost * silent! execute 'match IncSearch /\%'.line("'<").'l\%'.col("'<").'c/'
    autocmd CursorMoved,InsertEnter * silent! match none
augroup END

" vim-plug 
call plug#begin('~/.vim/plugged')

" Install vim-lsp (LSP client)
Plug 'prabirshrestha/vim-lsp'

" Plugin for automatic LSP server setup
Plug 'mattn/vim-lsp-settings'

" git management
Plug 'tpope/vim-fugitive'

" file tree (jerdtree)
Plug 'preservim/nerdtree'

"syntax highlighting
Plug 'morhetz/gruvbox'
Plug 'sheerun/vim-polyglot'

"snippets suggetions
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'

"Fuzzy Find
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" Comments 
Plug 'tpope/vim-commentary'

" Undo tree
Plug 'mbbill/undotree'

" Rust lsp
Plug 'rust-lang/rust.vim'

" AutoComplete
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'

call plug#end()

" Key mappings
nnoremap <leader>e :Ex<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>r :redo<CR>
nnoremap <leader>sh :term<CR>
inoremap jj <Esc>
vnoremap <leader>y "+y
nnoremap <C-d> <C-d>zz "smooth scrolling
nnoremap <C-u> <C-u>zz "smooth scrolling

" Enable LSP automatically
let g:lsp_auto_enable = 1
let g:python3_host_prog = expand('~/.local/share/pipx/venvs/python-lsp-server/bin/python')
au User lsp_setup call lsp#register_server({
    'name': 'pylsp',
    'cmd': [expand('~/.local/share/pipx/venvs/python-lsp-server/bin/pylsp')],
    'whitelist': ['python'],
    'initialization_options': {
        'pylsp': {
            'plugins': {
                'flake8': {'enabled': v:true},
                'black': {'enabled': v:true},
                'isort': {'enabled': v:true},
                'mypy': {'enabled': v:true},
                'ruff': {'enabled': v:true}
            }
        }
    }
})
au User lsp_setup call lsp#register_server({
    'name': 'clangd',
    'cmd': ['clangd'],
    'whitelist': ['c', 'cpp', 'objc', 'objcpp']
})
autocmd BufWritePre *.c,*.cpp,*.h execute ':silent !clang-format -i %'

" Enable real-time LSP diagnostics
let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_virtual_text_enabled = 1
let g:lsp_diagnostics_highlights_enabled = 1
let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_signs_delay = 500
let g:lsp_diagnostics_float_cursor = 1
let g:lsp_diagnostics_float_delay = 500
let g:lsp_diagnostics_virtual_text_prefix = "‚óè "

" Quickfix menu
nnoremap <silent> <leader>d :LspDocumentDiagnostics<CR>
nnoremap <silent> <leader>D :LspWorkspaceDiagnostics<CR>

" Keybindings for LSP
nnoremap gd :LspDefinition<CR> 
nnoremap gr :LspReferences<CR> 
nnoremap gi :LspImplementation<CR> 
nnoremap <leader>rn :LspRename<CR> 
nnoremap <leader>ff :LspDocumentFormat<CR> 
autocmd CursorHold * silent! LspHover
nnoremap K :LspHover<CR>

" Show autocomplete menu as you type
set completeopt=menuone,noinsert,noselect
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_min_chars = 2
let g:vsnip_snippet_dir = expand('~/.vim/snippets')
autocmd User lsp_setup call asyncomplete#register_source({ 'name': 'lsp', 'whitelist': ['*'], 'completor': function('lsp#complete') })

" Use Tab to navigate completion menu
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : vsnip#jumpable(1) ? "\<Plug>(vsnip-jump-next)" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : vsnip#jumpable(-1) ? "\<Plug>(vsnip-jump-prev)" : "\<S-Tab>"
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : vsnip#expandable() ? "\<Plug>(vsnip-expand)" : "\<CR>"

" Find files using FZF
nnoremap <leader>fz :Files<CR>

" Search for text inside files
nnoremap <leader>g :Rg<CR>

" nerd tree toggle
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>pv :tabp<CR>
nnoremap <leader>pn :tabn<CR>

" undo tree toggle
nnoremap <leader>u :UndotreeToggle<CR>

" Set colorscheme
syntax enable    " Enable syntax highlighting
filetype plugin indent on  " Enable filetype-specific settings
set termguicolors
set background=dark
colorscheme gruvbox

"git client
nnoremap <leader>gs :Git<CR> 
nnoremap <leader>gm :Git commit<CR> 
nnoremap <leader>gp :Git push<CR> 
