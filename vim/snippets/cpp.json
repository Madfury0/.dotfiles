{
  "main": {
    "prefix": "main",
    "body": "#include <iostream>\nusing namespace std;\n\nint main() {\n\t$0\n\treturn 0;\n}"
  },
  "for_loop": {
    "prefix": "for",
    "body": "for (int ${1:i} = 0; ${1:i} < ${2:10}; ${1:i}++) {\n\t$0\n}"
  },
  "while_loop": {
    "prefix": "while",
    "body": "while (${1:condition}) {\n\t$0\n}"
  },
  "if_else": {
    "prefix": "if",
    "body": "if (${1:condition}) {\n\t$0\n} else {\n\t\n}"
  },
  "cout": {
    "prefix": "cout",
    "body": "cout << \"${1:message}\" << endl;"
  },
  "class": {
    "prefix": "class",
    "body": "class ${1:ClassName} {\npublic:\n\t${1:ClassName}(${2:args}) {\n\t\t$0\n\t}\n};"
  }
},
"do_while": {
  "prefix": "do",
  "body": "do {\n\t$0\n} while (${1:condition});"
},
"switch": {
  "prefix": "switch",
  "body": "switch (${1:variable}) {\n\tcase ${2:value}:\n\t\t$0\n\t\tbreak;\n\tdefault:\n\t\tbreak;\n}"
},
"function": {
  "prefix": "func",
  "body": "${1:void} ${2:functionName}(${3:params}) {\n\t$0\n}"
},
"struct": {
  "prefix": "struct",
  "body": "struct ${1:StructName} {\n\t${2:data}\n};"
},
"include_guard": {
  "prefix": "guard",
  "body": "#ifndef ${1:${TM_FILENAME_BASE/(.*)/${1:/upcase}_H/}}\n#define $1\n\n$0\n\n#endif // $1"
},
"cin": {
  "prefix": "cin",
  "body": "cin >> ${1:variable};"
},
"range_for": {
  "prefix": "forr",
  "body": "for (auto& ${1:element} : ${2:container}) {\n\t$0\n}"
},
"try_catch": {
  "prefix": "try",
  "body": "try {\n\t$0\n} catch (${1:const std::exception& e}) {\n\tstd::cerr << e.what() << std::endl;\n}"
},
"namespace": {
  "prefix": "namespace",
  "body": "namespace ${1:name} {\n\n$0\n\n} // namespace $1"
},
"comment_block": {
  "prefix": "/*",
  "body": "/**\n * $0\n */"
},
"lambda": {
  "prefix": "lmd",
  "body": "[${1:&}](${2:args}) ${3:mutable} ${4:noexcept} -> ${5:ret} {\n\t$0\n}"
},
"auto_variable": {
  "prefix": "auto",
  "body": "auto ${1:var} = ${2:value};"
},
"smart_ptr_unique": {
  "prefix": "uniqptr",
  "body": "std::unique_ptr<${1:Type}> ${2:ptr} = std::make_unique<${1:Type}>(${3:args});"
},
"smart_ptr_shared": {
  "prefix": "shrdptr",
  "body": "std::shared_ptr<${1:Type}> ${2:ptr} = std::make_shared<${1:Type}>(${3:args});"
},
"move_semantics": {
  "prefix": "move",
  "body": "std::move(${1:object})"
},
"constexpr": {
  "prefix": "constexpr",
  "body": "constexpr ${1:type} ${2:name} = ${3:value};"
},
"structured_binding": {
  "prefix": "structbind",
  "body": "auto& [${1:var1}, ${2:var2}] = ${3:container};"
},
"concept": {
  "prefix": "concept",
  "body": "template<typename ${1:T}>\nconcept ${2:ConceptName} = requires(${1:T} t) {\n\t$0\n};"
},
"template_fold": {
  "prefix": "fold",
  "body": "(${1:args} ${2:+} ... ${3:+} ${4:init})"
},
"thread": {
  "prefix": "thrd",
  "body": "std::thread ${1:t}([]() {\n\t$0\n});\n${1:t}.join();"
},
"atomic": {
  "prefix": "atomic",
  "body": "std::atomic<${1:int}> ${2:var}(${3:0});"
},
"variant": {
  "prefix": "variant",
  "body": "std::variant<${1:types}> ${2:var};"
},
"optional": {
  "prefix": "optional",
  "body": "std::optional<${1:type}> ${2:var};"
},
"string_view": {
  "prefix": "sv",
  "body": "std::string_view ${1:sv} = \"${2:text}\";"
},
"ranges": {
  "prefix": "rng",
  "body": "std::ranges::${1:algorithm}(${2:container}${3:, [](auto& a) { $0 \}});"
},
"tuple": {
  "prefix": "tuple",
  "body": "std::tuple<${1:types}> ${2:tup};"
},
"user_literal": {
  "prefix": "lit",
  "body": "${1:type} operator\"\" ${2:_name}(${3:unsigned long long n}) {\n\treturn $0;\n}"
},
"nodiscard": {
  "prefix": "nodiscard",
  "body": "[[nodiscard]] ${1:return_type} ${2:function}(${3:args})"
},


"arduino_setup_loop": {
  "prefix": "arduino",
  "body": "void setup() {\n\t${1:// put your setup code here, to run once:}\n}\n\nvoid loop() {\n\t${2:// put your main code here, to run repeatedly:}\n}"
},
"pin_mode": {
  "prefix": "pm",
  "body": "pinMode(${1:pin}, ${2:INPUT|OUTPUT|INPUT_PULLUP});"
},
"digital_write": {
  "prefix": "dw",
  "body": "digitalWrite(${1:pin}, ${2:HIGH|LOW});"
},
"digital_read": {
  "prefix": "dr",
  "body": "digitalRead(${1:pin});"
},
"analog_read": {
  "prefix": "ar",
  "body": "analogRead(${1:pin});"
},
"analog_write": {
  "prefix": "aw",
  "body": "analogWrite(${1:pin}, ${2:value});"
},
"serial_begin": {
  "prefix": "serbegin",
  "body": "Serial.begin(${1:9600});"
},
"serial_print": {
  "prefix": "serprint",
  "body": "Serial.print(${1:\"message\"}${2:, format});"
},
"serial_println": {
  "prefix": "serprintln",
  "body": "Serial.println(${1:\"message\"}${2:, format});"
},
"delay_ms": {
  "prefix": "delay",
  "body": "delay(${1:1000});"
},
"millis": {
  "prefix": "millis",
  "body": "millis()"
},
"attach_interrupt": {
  "prefix": "interrupt",
  "body": "attachInterrupt(digitalPinToInterrupt(${1:pin}), ${2:ISR}, ${3:RISING|FALLING|CHANGE});"
},
"isr": {
  "prefix": "isr",
  "body": "void ${1:functionName}() {\n\t${2:// interrupt code}\n}"
},
"servo": {
  "prefix": "servo",
  "body": "#include <Servo.h>\n\nServo ${1:myservo};\n\nvoid setup() {\n\t${1:myservo}.attach(${2:9});\n}\n\nvoid loop() {\n\t${1:myservo}.write(${3:90});\n}"
},
"ultrasonic": {
  "prefix": "sonic",
  "body": "long ${1:duration}, ${2:distance};\ndigitalWrite(${3:triggerPin}, LOW);\ndelayMicroseconds(2);\ndigitalWrite(${3:triggerPin}, HIGH);\ndelayMicroseconds(10);\ndigitalWrite(${3:triggerPin}, LOW);\n${1:duration} = pulseIn(${4:echoPin}, HIGH);\n${2:distance} = ${1:duration} * 0.034 / 2;"
},
"eeprom": {
  "prefix": "eeprom",
  "body": "#include <EEPROM.h>\n\nEEPROM.${1:write|read}(${2:address}, ${3:value});"
},
"blink": {
  "prefix": "blink",
  "body": "void setup() {\n\tpinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop() {\n\tdigitalWrite(LED_BUILTIN, HIGH);\n\tdelay(1000);\n\tdigitalWrite(LED_BUILTIN, LOW);\n\tdelay(1000);\n}"
}
