snippet app_main "main entry point" b
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

void app_main(void) {
    $0
}
endsnippet

snippet xTask "Create FreeRTOS task" b
xTaskCreate(
    ${1:task_function},
    "${2:TaskName}",
    ${3:stack_size},
    ${4:void*_param},
    ${5: Priority},
    ${6:*handle_t}
);
$0
endsnippet

snippet logi "ESP_LOGI with tag" b
ESP_LOGI("${1:TAG}", "${2:message}");
$0
endsnippet

snippet loge "ESP_LOGE with tag" b
ESP_LOGE("${1:TAG}", "${2:message}");
$0
endsnippet

snippet delay "vTaskDelay ms" b
vTaskDelay(pdMS_TO_TICKS(${1:1000}));
$0
endsnippet

snippet task "FreeRTOS task" b
void ${1:task_name}(void *pvParameters) {
    while(1) {
        ${2:logic}
        $0
        
        vTaskDelay(pdMS_TO_TICKS(${3:1000}));
    }
}
endsnippet

snippet err "ESP_ERROR_CHECK" b
esp_err_t err = ${1:esp_function()};
if (err != ESP_OK) {
    ESP_LOGE("${2:TAG}", "${3:Operation failed}: %s", esp_err_to_name(err));
    ${4:// Handle error - cleanup or restart}
}
$0
endsnippet

snippet nvs "NVS initialization" b
// Initialize Non-Volatile Storage (NVS)
esp_err_t ret = nvs_flash_init();
if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
    ESP_LOGW("${1:TAG}", "NVS needs erase, reinitializing...");
    ESP_ERROR_CHECK(nvs_flash_erase());
    ret = nvs_flash_init();
}
ESP_ERROR_CHECK(ret);
$0
endsnippet

snippet wifi "WiFi Station Initialization" b
// Basic WiFi station initialization sequence
ESP_ERROR_CHECK(esp_netif_init());                  // Initialize TCP/IP stack
ESP_ERROR_CHECK(esp_event_loop_create_default());   // Create event loop
esp_netif_t *sta_netif = esp_netif_create_default_wifi_sta();  // Create STA interface

wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT(); // Default WiFi config
ESP_ERROR_CHECK(esp_wifi_init(&cfg));               // Initialize WiFi driver
$0
endsnippet

snippet gpio "GPIO Configuration" b
// Configure GPIO ${1:num} as ${2|INPUT,OUTPUT,INPUT_PULLUP,INPUT_PULLDOWN|}
gpio_config_t io_conf = {
    .pin_bit_mask = (1ULL << $1),
    .mode = GPIO_MODE_${2},
    .pull_up_en = ${3|GPIO_PULLUP_DISABLE,GPIO_PULLUP_ENABLE|},
    .pull_down_en = ${4|GPIO_PULLDOWN_DISABLE,GPIO_PULLDOWN_ENABLE|},
    .intr_type = GPIO_INTR_DISABLE
};
ESP_ERROR_CHECK(gpio_config(&io_conf));
$0
endsnippet

snippet timer "HW Timer Configuration" b
// Create ${1:period_ms}ms periodic timer
esp_timer_handle_t ${2:timer};
const esp_timer_create_args_t ${2}_args = {
    .callback = ${3:timer_callback},
    .name = "${4:timer_task}"
};
ESP_ERROR_CHECK(esp_timer_create(&${2}_args, &${2}));
ESP_ERROR_CHECK(esp_timer_start_periodic($2, ${1} * 1000));
$0
endsnippet

snippet event "Event Handler Registration" b
// Register event handler for ${1:EVENT_BASE}
ESP_ERROR_CHECK(esp_event_handler_instance_register(
    ${1},
    ${2:EVENT_ID},
    ${3:event_handler},
    NULL,
    ${4:NULL}
));
$0
endsnippet

snippet spiffs "SPIFFS Initialization" b
// Mount SPIFFS filesystem
esp_vfs_spiffs_conf_t conf = {
    .base_path = "/spiffs",
    .partition_label = NULL,
    .max_files = ${1:5},
    .format_if_mount_failed = ${2|true,false|}
};
ESP_ERROR_CHECK(esp_vfs_spiffs_register(&conf));
$0
endsnippet

snippet http "HTTP Server Starter" b
// Start HTTP server on port ${1:80}
httpd_handle_t server = NULL;
httpd_config_t config = HTTPD_DEFAULT_CONFIG();
config.server_port = $1;
config.ctrl_port += $1;  // Unique control port

if (httpd_start(&server, &config) == ESP_OK) {
    httpd_register_uri_handlers(server, ${2:handlers});
}
$0
endsnippet

snippet ble "BLE GATT Server Setup" b
// Initialize BLE controller and NimBLE stack
esp_bt_controller_config_t bt_cfg = BT_CONTROLLER_INIT_CONFIG_DEFAULT();
ESP_ERROR_CHECK(esp_bt_controller_init(&bt_cfg));
ESP_ERROR_CHECK(esp_bt_controller_enable(ESP_BT_MODE_BLE));

esp_bluedroid_config_t bluedroid_cfg = BT_BLUEDROID_INIT_CONFIG_DEFAULT();
ESP_ERROR_CHECK(esp_bluedroid_init_with_cfg(&bluedroid_cfg));
ESP_ERROR_CHECK(esp_bluedroid_enable());

// Register BLE GATT service
esp_ble_gatts_app_register(${1:APP_ID});
$0
endsnippet

snippet retry "Retry Loop Pattern" b
for(int ${1:retry} = 0; $1 < ${2:5}; $1++) {
    esp_err_t err = ${3:operation()};
    if(err == ESP_OK) break;
    if($1 == $2-1) ESP_ERROR_CHECK(err);
    vTaskDelay(pdMS_TO_TICKS(${4:200}));
}
$0
endsnippet

snippet i2c "I2C Master Initialization" b
// Configure I2C master on port ${1|0,1|}
i2c_config_t conf = {
    .mode = I2C_MODE_MASTER,
    .sda_io_num = ${2:GPIO_NUM_21},
    .scl_io_num = ${3:GPIO_NUM_22},
    .sda_pullup_en = GPIO_PULLUP_ENABLE,
    .scl_pullup_en = GPIO_PULLUP_ENABLE,
    .master.clk_speed = ${4:100000}
};
ESP_ERROR_CHECK(i2c_param_config($1, &conf));
ESP_ERROR_CHECK(i2c_driver_install($1, conf.mode, 0, 0, 0));
$0
endsnippet

snippet pm "Power Management Configuration" b
// Configure CPU frequency (${1|80,160,240|} MHz
esp_pm_config_t pm_config = {
    .max_freq_mhz = $1,
    .min_freq_mhz = $1,
    .light_sleep_enable = ${2|false,true|}
};
ESP_ERROR_CHECK(esp_pm_configure(&pm_config));
$0
endsnippet

snippet uart "UART Configuration" b
// Setup UART ${1|0,1,2|} (TX: ${2:GPIO_NUM_1}, RX: ${3:GPIO_NUM_3})
uart_config_t uart_config = {
    .baud_rate = ${4:115200},
    .data_bits = UART_DATA_8_BITS,
    .parity = UART_PARITY_DISABLE,
    .stop_bits = UART_STOP_BITS_1,
    .flow_ctrl = UART_HW_FLOWCTRL_DISABLE
};
ESP_ERROR_CHECK(uart_param_config($1, &uart_config));
ESP_ERROR_CHECK(uart_set_pin($1, $2, $3, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE));
$0
endsnippet

snippet mqtt "MQTT Client Initialization" b
// Configure MQTT client with URI ${1:mqtts://broker.example.com:8883}
esp_mqtt_client_config_t mqtt_cfg = {
    .broker = {
        .address.uri = "$1",
    },
    .credentials = {
        .username = "${2:user}",
        .authentication.password = "${3:pass}"
    },
    .buffer = {
        .size = ${4:2048},  // TX/RX buffer size in bytes
        .out_size = ${5:1024} // Outgoing buffer size
    }
};
esp_mqtt_client_handle_t client = esp_mqtt_client_init(&mqtt_cfg);
ESP_ERROR_CHECK(esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, ${6:mqtt_event_handler}, NULL));
ESP_ERROR_CHECK(esp_mqtt_client_start(client));
$0
endsnippet

snippet spi "SPI Master Configuration" b
// Configure SPI${1|2,3|} host (MISO: ${2:GPIO_NUM_19}, MOSI: ${3:GPIO_NUM_23}, SCLK: ${4:GPIO_NUM_18})
spi_bus_config_t buscfg = {
    .miso_io_num = $2,
    .mosi_io_num = $3,
    .sclk_io_num = $4,
    .quadwp_io_num = -1,
    .quadhd_io_num = -1,
    .max_transfer_sz = ${5:4096}  // Max transfer size in bytes
};

spi_device_interface_config_t devcfg = {
    .clock_speed_hz = ${6:1000000},  // Clock speed (1MHz typical)
    .mode = ${7|0,1,2,3|},          // SPI mode (0-3)
    .spics_io_num = ${8:GPIO_NUM_5}, // CS pin
    .queue_size = ${9:7}            // Transaction queue size
};

ESP_ERROR_CHECK(spi_bus_initialize(SPI${1}_HOST, &buscfg, ${10|SPI_DMA_CH_AUTO,SPI_DMA_DISABLED|}));
ESP_ERROR_CHECK(spi_bus_add_device(SPI${1}_HOST, &devcfg, &${11:spi_device}));
$0
endsnippet

snippet adc "ADC Configuration with Attenuation" b
// Configure ADC${1|1,2|} Channel ${2:0} (GPIO ${3:36})
adc1_config_width(ADC_WIDTH_BIT_${4|12,11,10,9|});  // Resolution
adc1_config_channel_atten(ADC1_CHANNEL_$2, ADC_ATTEN_DB_${5|0,2,6,11|}); // 0-3.1V, 0-2.2V, 0-1.5V, 0-1.1V

// Characterize ADC curve for better accuracy
esp_adc_cal_characteristics_t *adc_chars = calloc(1, sizeof(esp_adc_cal_characteristics_t));
esp_adc_cal_characterize(ADC_UNIT_$1, ADC_ATTEN_DB_$5, ADC_WIDTH_BIT_$4, ${6:1100}, adc_chars);
$0
endsnippet

snippet pwm "LEDC PWM Configuration" b
// Configure PWM channel (${1:0-7}) on GPIO ${2:18} @ ${3:5000}Hz
const ledc_timer_config_t timer_cfg = {
    .speed_mode = LEDC_${4|LOW_SPEED_MODE,HIGH_SPEED_MODE|},
    .duty_resolution = LEDC_TIMER_${5|13,12,11,10,9,8,7,6|}_BIT, // Resolution (13-bit = 8192 steps)
    .timer_num = LEDC_TIMER_${6|0,1,2,3|},
    .freq_hz = $3,
    .clk_cfg = LEDC_AUTO_CLK
};
ESP_ERROR_CHECK(ledc_timer_config(&timer_cfg));

const ledc_channel_config_t channel_cfg = {
    .gpio_num = $2,
    .speed_mode = $4,
    .channel = LEDC_CHANNEL_$1,
    .timer_sel = LEDC_TIMER_$6,
    .duty = ${7:4096},  // 50% duty for 13-bit (8192/2)
    .hpoint = 0
};
ESP_ERROR_CHECK(ledc_channel_config(&channel_cfg));
$0
endsnippet

snippet deep_sleep "Deep Sleep with Wakeup" b
// Configure deep sleep wakeup source (${1|TIMER,TOUCH,EXT0,EXT1,ULP|})
esp_sleep_enable_${1}_wakeup(${2:/* Args */});

// For timer wakeup (in microseconds):
// esp_sleep_enable_timer_wakeup(${2:3000000}); // 3 seconds

// For EXT0 (GPIO) wakeup:
// esp_sleep_enable_ext0_wakeup(${2:GPIO_NUM_0}, ${3:0}); // GPIO, Level

ESP_LOGI("${4:TAG}", "Entering deep sleep");
esp_deep_sleep_start();
$0
endsnippet

snippet ota "OTA Update Setup" b
// Configure OTA update server parameters
esp_http_client_config_t config = {
    .url = "${1:https://firmware.example.com/update.bin}",
    .cert_pem = (const char *)${2:server_cert_pem_start},
    .timeout_ms = ${3:5000},
    .keep_alive_enable = true,
};

esp_https_ota_config_t ota_config = {
    .http_config = &config,
    .partial_http_download = ${4|false,true|}
};

esp_https_ota_handle_t ota_handle = NULL;
ESP_ERROR_CHECK(esp_https_ota_begin(&ota_config, &ota_handle));
$0
endsnippet

snippet mutex "Thread-Safe Mutex Pattern" b
static SemaphoreHandle_t ${1:xMutex} = NULL;

// Initialize mutex in app_main
$1 = xSemaphoreCreateMutex();

// Usage pattern:
if(xSemaphoreTake($1, pdMS_TO_TICKS(${2:1000})) == pdTRUE) {
    // Critical section
    $0
    xSemaphoreGive($1);
} else {
    ESP_LOGE("${3:TAG}", "Mutex timeout");
}
endsnippet

snippet event_group "Event Group Synchronization" b
static EventGroupHandle_t ${1:xEventGroup} = NULL;
#define ${2:EVENT_BIT_0} (1 << 0)

// Create event group in app_main
$1 = xEventGroupCreate();

// Set bits from ISR:
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
xEventGroupSetBitsFromISR($1, $2, &xHigherPriorityTaskWoken);

// Wait for bits in task:
EventBits_t uxBits = xEventGroupWaitBits(
    $1,        // Event group
    $2,        // Bits to wait for
    pdTRUE,    // Clear on exit
    pdFALSE,   // Wait for all bits
    portMAX_DELAY
);
$0
endsnippet

snippet sntp "SNTP Time Synchronization" b
// Configure SNTP with ${1|0,1,2,3|} servers
sntp_setoperatingmode(SNTP_OPMODE_POLL);
sntp_setservername(0, "${2:pool.ntp.org}");
sntp_setservername(1, "${3:time.nist.gov}");
sntp_init();

// Wait for time sync (timeout: ${4:10} seconds)
int retry = 0;
while (sntp_get_sync_status() == SNTP_SYNC_STATUS_RESET && ++retry < ${4}0) {
    ESP_LOGI("${5:TAG}", "Waiting for system time sync...");
    vTaskDelay(100 / portTICK_PERIOD_MS);
}
$0
endsnippet