{
  "main": {
    "prefix": "main",
    "body": "if __name__ == \"__main__\":\n\t$0"
  },
  "for_loop": {
    "prefix": "for",
    "body": "for ${1:i} in range(${2:10}):\n\t$0"
  },
  "while_loop": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t$0"
  },
  "function": {
    "prefix": "def",
    "body": "def ${1:function_name}(${2:args}):\n\t$0"
  },
  "class": {
    "prefix": "class",
    "body": "class ${1:ClassName}:\n\tdef __init__(self, ${2:args}):\n\t\t$0"
  },
  "print": {
    "prefix": "print",
    "body": "print(\"${1:message}\")"
  }
},
{
  "if_block": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t$0"
  },
  "list_comprehension": {
    "prefix": "lc",
    "body": "[${1:expression} for ${2:item} in ${3:iterable}]"
  },
  "try_except": {
    "prefix": "try",
    "body": [
      "try:",
      "\t$1",
      "except ${2:Exception} as ${3:e}:",
      "\t$4",
      "$0"
    ]
  },
  "with_statement": {
    "prefix": "with",
    "body": "with ${1:resource} as ${2:alias}:\n\t$0"
  },
  "docstring": {
    "prefix": "doc",
    "body": "\"\"\"${1:docstring}\"\"\""
  },
  "lambda_function": {
    "prefix": "lambda",
    "body": "lambda ${1:args}: ${2:expression}"
  },
  "shebang": {
    "prefix": "shebang",
    "body": "#!/usr/bin/env python3"
  },
  "pytest_fixture": {
    "prefix": "fixture",
    "body": [
      "@pytest.fixture",
      "def ${1:fixture_name}():",
      "\t$0"
    ]
  }
}