{
  "main": {
    "prefix": "main",
    "body": "if __name__ == \"__main__\":\n\t$0"
  },
  "for_loop": {
    "prefix": "for",
    "body": "for ${1:i} in range(${2:10}):\n\t$0"
  },
  "while_loop": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t$0"
  },
  "function": {
    "prefix": "def",
    "body": "def ${1:function_name}(${2:args}):\n\t$0"
  },
  "class": {
    "prefix": "class",
    "body": "class ${1:ClassName}:\n\tdef __init__(self, ${2:args}):\n\t\t$0"
  },
  "print": {
    "prefix": "print",
    "body": "print(\"${1:message}\")"
  }
},
{
  "if_block": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t$0"
  },
  "list_comprehension": {
    "prefix": "lc",
    "body": "[${1:expression} for ${2:item} in ${3:iterable}]"
  },
  "try_except": {
    "prefix": "try",
    "body": [
      "try:",
      "\t$1",
      "except ${2:Exception} as ${3:e}:",
      "\t$4",
      "$0"
    ]
  },
  "with_statement": {
    "prefix": "with",
    "body": "with ${1:resource} as ${2:alias}:\n\t$0"
  },
  "docstring": {
    "prefix": "doc",
    "body": "\"\"\"${1:docstring}\"\"\""
  },
  "lambda_function": {
    "prefix": "lambda",
    "body": "lambda ${1:args}: ${2:expression}"
  },
  "shebang": {
    "prefix": "shebang",
    "body": "#!/usr/bin/env python3"
  },
  "pytest_fixture": {
    "prefix": "fixture",
    "body": [
      "@pytest.fixture",
      "def ${1:fixture_name}():",
      "\t$0"
    ]
  }
},




"arduino_setup_loop": {
  "prefix": "arduino",
  "body": "void setup() {\n\t${1:// put your setup code here, to run once:}\n}\n\nvoid loop() {\n\t${2:// put your main code here, to run repeatedly:}\n}"
},
"pin_mode": {
  "prefix": "pm",
  "body": "pinMode(${1:pin}, ${2:INPUT|OUTPUT|INPUT_PULLUP});"
},
"digital_write": {
  "prefix": "dw",
  "body": "digitalWrite(${1:pin}, ${2:HIGH|LOW});"
},
"digital_read": {
  "prefix": "dr",
  "body": "digitalRead(${1:pin});"
},
"analog_read": {
  "prefix": "ar",
  "body": "analogRead(${1:pin});"
},
"analog_write": {
  "prefix": "aw",
  "body": "analogWrite(${1:pin}, ${2:value});"
},
"serial_begin": {
  "prefix": "serbegin",
  "body": "Serial.begin(${1:9600});"
},
"serial_print": {
  "prefix": "serprint",
  "body": "Serial.print(${1:\"message\"}${2:, format});"
},
"serial_println": {
  "prefix": "serprintln",
  "body": "Serial.println(${1:\"message\"}${2:, format});"
},
"delay_ms": {
  "prefix": "delay",
  "body": "delay(${1:1000});"
},
"millis": {
  "prefix": "millis",
  "body": "millis()"
},
"attach_interrupt": {
  "prefix": "interrupt",
  "body": "attachInterrupt(digitalPinToInterrupt(${1:pin}), ${2:ISR}, ${3:RISING|FALLING|CHANGE});"
},
"isr": {
  "prefix": "isr",
  "body": "void ${1:functionName}() {\n\t${2:// interrupt code}\n}"
},
"servo": {
  "prefix": "servo",
  "body": "#include <Servo.h>\n\nServo ${1:myservo};\n\nvoid setup() {\n\t${1:myservo}.attach(${2:9});\n}\n\nvoid loop() {\n\t${1:myservo}.write(${3:90});\n}"
},
"ultrasonic": {
  "prefix": "sonic",
  "body": "long ${1:duration}, ${2:distance};\ndigitalWrite(${3:triggerPin}, LOW);\ndelayMicroseconds(2);\ndigitalWrite(${3:triggerPin}, HIGH);\ndelayMicroseconds(10);\ndigitalWrite(${3:triggerPin}, LOW);\n${1:duration} = pulseIn(${4:echoPin}, HIGH);\n${2:distance} = ${1:duration} * 0.034 / 2;"
},
"eeprom": {
  "prefix": "eeprom",
  "body": "#include <EEPROM.h>\n\nEEPROM.${1:write|read}(${2:address}, ${3:value});"
},
"blink": {
  "prefix": "blink",
  "body": "void setup() {\n\tpinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop() {\n\tdigitalWrite(LED_BUILTIN, HIGH);\n\tdelay(1000);\n\tdigitalWrite(LED_BUILTIN, LOW);\n\tdelay(1000);\n}"
}
